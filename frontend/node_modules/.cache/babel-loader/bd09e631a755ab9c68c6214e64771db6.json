{"ast":null,"code":"import { BASE_URL } from \"./Url\";\n\nclass Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._userUrl = `${this._baseUrl}/users/me`;\n    this._cardsUrl = `${this._baseUrl}/cards`;\n    this._avatarUrl = `${this._baseUrl}/users/me/avatar`;\n    this._likesUrl = `${this._baseUrl}/cards/cardId/likes`; // this._headers = headers;\n\n    this._token = headers['authorization'];\n  }\n\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    return res.json();\n  } //////// загружаем данные пользователя с сервера\n\n\n  getProfileData() {\n    return fetch(this._userUrl, {\n      // method: \"GET\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token\n      },\n      credentials: 'include'\n    }).then(res => this._getResponseData(res));\n  } //////// сохраняем данные пользователя (профиль) на сервере\n\n\n  setUserInfo(_ref2) {\n    let {\n      name,\n      about\n    } = _ref2;\n    return fetch(this._userUrl, {\n      method: \"PATCH\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => this._getResponseData(res));\n  } ////////// сохраняем аватар пользователя (профиль) на сервере\n\n\n  setUserAvatar(src) {\n    return fetch(`${this._userUrl}/avatar`, {\n      method: \"PATCH\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        avatar: src\n      })\n    }).then(res => this._getResponseData(res));\n  } //////// загружаем карточки с сервера\n\n\n  getInitialCards() {\n    return fetch(this._cardsUrl, {\n      // headers: this._headers,\n      headers: {\n        authorization: this._token\n      },\n      credentials: 'include'\n    }).then(res => this._getResponseData(res));\n  } //////// добавляем новую карточку на сервер\n\n\n  postNewCard(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return fetch(this._cardsUrl, {\n      method: \"POST\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => this._getResponseData(res));\n  } ///////удаление карточки пользователя с сервера\n\n\n  deleteCard(id) {\n    console.log(id);\n    return fetch(`${this._cardsUrl}/${id}`, {\n      method: \"DELETE\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token\n      },\n      credentials: 'include'\n    }).then(res => this._getResponseData(res));\n  } //////////установка лайка карточке\n\n\n  changeLikeCardStatus(cardId, isNotLiked) {\n    return fetch(`${this._cardsUrl}/${cardId}/likes`, {\n      method: isNotLiked ? \"PUT\" : \"DELETE\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token\n      },\n      credentials: 'include'\n    }).then(res => this._getResponseData(res));\n  }\n\n} // const api = new Api({\n//   baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-50\",\n//   headers: {\n//     authorization: \"0cd386ae-1830-42e7-aefa-1c5dfe1b78a1\",\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n// authorization: `Bearer ${localStorage.getItem('token')}`,\n\n\nconst api = new Api({\n  baseUrl: BASE_URL,\n  credentials: 'include',\n  headers: {\n    'Content-Type': 'application/json' // authorization: `Bearer ${localStorage.getItem('token')}`\n\n  }\n});\nexport default api;","map":{"version":3,"names":["BASE_URL","Api","constructor","baseUrl","headers","_baseUrl","_userUrl","_cardsUrl","_avatarUrl","_likesUrl","_token","_getResponseData","res","ok","Promise","reject","status","json","getProfileData","fetch","authorization","credentials","then","setUserInfo","name","about","method","body","JSON","stringify","setUserAvatar","src","avatar","getInitialCards","postNewCard","link","deleteCard","id","console","log","changeLikeCardStatus","cardId","isNotLiked","api"],"sources":["/Users/alexandrkatsuro/Downloads/Yandex_practicum/dev/project-work-15/react-mesto-api-full/frontend/src/utils/Api.js"],"sourcesContent":["import { BASE_URL } from \"./Url\";\n\nclass Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._userUrl = `${this._baseUrl}/users/me`;\n    this._cardsUrl = `${this._baseUrl}/cards`;\n    this._avatarUrl = `${this._baseUrl}/users/me/avatar`;\n    this._likesUrl = `${this._baseUrl}/cards/cardId/likes`;\n    // this._headers = headers;\n    this._token = headers['authorization'];\n  }\n\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n\n  //////// загружаем данные пользователя с сервера\n  getProfileData() {\n    return fetch(this._userUrl, {\n      // method: \"GET\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token,\n      },\n      credentials: 'include',\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //////// сохраняем данные пользователя (профиль) на сервере\n  setUserInfo({ name, about }) {\n    return fetch(this._userUrl, {\n      method: \"PATCH\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token,\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        name: name,\n        about: about,\n      }),\n    }).then((res) => this._getResponseData(res));\n  }\n\n\n  ////////// сохраняем аватар пользователя (профиль) на сервере\n  setUserAvatar(src) {\n    return fetch(`${this._userUrl}/avatar`, {\n      method: \"PATCH\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token,\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        avatar: src,\n      }),\n    }).then((res) => this._getResponseData(res));\n  }\n\n\n  //////// загружаем карточки с сервера\n  getInitialCards() {\n    return fetch(this._cardsUrl, {\n      // headers: this._headers,\n      headers: {\n        authorization: this._token,\n      },\n      credentials: 'include',\n    }).then((res) => this._getResponseData(res));\n  }\n\n    //////// добавляем новую карточку на сервер\n    postNewCard({ name, link }) {\n      return fetch(this._cardsUrl, {\n        method: \"POST\",\n        // headers: this._headers,\n        headers: {\n          authorization: this._token,\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          name: name,\n          link: link,\n        }),\n      }).then((res) => this._getResponseData(res));\n    }\n\n  ///////удаление карточки пользователя с сервера\n  deleteCard(id) {\n    console.log(id);\n    return fetch(`${this._cardsUrl}/${id}`, {\n      method: \"DELETE\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token,\n      },\n      credentials: 'include',\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //////////установка лайка карточке\n  changeLikeCardStatus(cardId, isNotLiked) {\n    return fetch(`${this._cardsUrl}/${cardId}/likes`, {\n      method: isNotLiked ? \"PUT\" : \"DELETE\",\n      // headers: this._headers,\n      headers: {\n        authorization: this._token,\n      },\n      credentials: 'include',\n    }).then((res) => this._getResponseData(res));\n  }\n\n}\n\n// const api = new Api({\n//   baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-50\",\n//   headers: {\n//     authorization: \"0cd386ae-1830-42e7-aefa-1c5dfe1b78a1\",\n//     \"Content-Type\": \"application/json\",\n//   },\n// });\n    // authorization: `Bearer ${localStorage.getItem('token')}`,\n\n\n\nconst api = new Api({\n  baseUrl: BASE_URL,\n  credentials: 'include',\n  headers: {\n    'Content-Type': 'application/json',\n    // authorization: `Bearer ${localStorage.getItem('token')}`\n  },\n});\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}